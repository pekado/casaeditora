drop table if exists comments;
drop table if exists poems;

create table poems (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null default auth.uid(),
  title text default '',
  body  text default '',
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table poems enable row level security;

create policy "Individuals can create poems." on poems for
    insert with check (auth.uid() = user_id);

create policy "Individuals can view every poems. " on poems for
    select using (true);

create policy "Individuals can update their own poems." on poems for
    update using (auth.uid() = user_id);

create policy "Individuals can delete their own poems." on poems for
    delete using (auth.uid() = user_id);


create table comments (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null default auth.uid(),
  body  text default '',
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table comments enable row level security;

create policy "Individuals can create comments." on comments for
    insert with check (auth.uid() = user_id);

create policy "Individuals can view every comments. " on comments for
    select using (true);

create policy "Individuals can update their own comments." on comments for
    update using (auth.uid() = user_id);

create policy "Individuals can delete their own comments." on comments for
    delete using (auth.uid() = user_id);



